#!/usr/bin/env perl

#
# This configure script just checks that all the right dependencies are
# available. It does not (yet) generate any Makefiles or header files...
#

use strict;
use File::Temp qw(tempfile tempdir);
use File::Spec::Functions qw(rel2abs);
use File::Basename;
use Getopt::Long;

my @exts = qw(mysql json base64 gcrypt inflect);
my @sapis = qw(cli);

our $path = dirname(rel2abs($0));

our $CFLAGS = "";
our $LDFLAGS = "";
our $prefix = "/usr/local";

sub error {
    my $message = shift;
    print "\n\e[31m$message\n\e[0m";
    exit 1;
};

sub warning {
    my $message = shift;
    print "\n\e[33m$message\n\e[0m";
};

sub success {
    my $message = shift;
    print "\n\e[32m$message\n\e[0m";
};

exit 1 unless GetOptions "with-lib-dir=s"  => \my $lib_dir,
                         "debug"     => \my $debug,
                         "profile"   => \my $profile,
                         "verbose"   => \my $verbose,
                         "prefix=s"  => \$prefix,
                         "cflags=s"  => \$CFLAGS,
                         "ldflags=s" => \$LDFLAGS,
                         "vanilla"   => sub { @exts = (); @sapis = () },
                         "ext=s"     => sub {
                             my $ext = $_[1];
                             error "Unknown extension $ext" unless -d "ext/$ext";
                             push @exts, $ext;
                         },
                         "no-ext=s"  => sub {
                             my $ext = $_[1];
                             @exts = grep { $_ ne $ext } @exts;
                         },
                         "sapi=s"    => sub {
                             my $sapi = $_[1];
                             error "Unknown SAPI $sapi" unless -d "sapi/$sapi";
                             push @sapis, $sapi;
                         },
                         "no-sapi=s" => sub {
                             my $sapi = $_[1];
                             @sapis = grep { $_ ne $sapi } @sapis;
                         };

if($lib_dir) {
    $CFLAGS .= " -I$lib_dir/include -L$lib_dir/lib";
}
if($profile) {
    $CFLAGS .= " -pg";
}
if($debug) {
    $CFLAGS .= " -g -DSL_DEBUG";
} else {
    $CFLAGS .= " -O3";
}

sub compile {
    my ($flags, $src) = @_;
    my ($fh, $filename) = tempfile SUFFIX => ".c";
    my $binary = $filename;
    $binary =~ s/\.c$//;
    print $fh $src;
    close $fh;
    my $command = "$ENV{CC} $CFLAGS $flags -o $binary $filename $flags 2>&1";
    print "% $command\n" if $verbose;
    my $output = `$command`;
    print $output if $verbose;
    chomp $output;
    $? == 0;
};

sub check_lib {
    my ($lib, $src) = @_;
    print "Checking for lib$lib... ";
    if(compile "-l$lib", $src) {
        $LDFLAGS .= " -l$lib";
        print "ok\n";
    } else {
        # some libraries (eg. iconv) are rolled into libc on some systems. see if we can compile without the -liconv switch
        if(compile "", $src) {
            print "ok\n";
        } else {
            # nope
            print "failed\n";
            error "Could not find lib$lib (used -l$lib)\nPlease make sure it is available before building Slash";
        }
    }
};

sub check_prog {
    my ($cmd, $expect) = @_;
    my ($prog) = split / /, $cmd;
    print "Checking for $prog... ";
    ($_) = `$cmd 2>&1`;
    chomp;
    if($? == 0 && /$expect/) {
        print "$_\n";
    } else {
        print "failed\n";
        error "Could not find $prog (used $cmd)\nPlease make sure it is available before building Slash";
    }
}

if(!defined $ENV{CC}) {
    warning "CC environment variable not set, falling back to 'cc'...";
    $ENV{CC} = "cc";
}
check_prog "$ENV{CC} --version";

check_prog "flex --version", "flex 2";

check_lib "gmp", <<C;
#include <gmp.h>

int main() {
    mpz_t mpz;
    mpz_init(mpz);
}
C

check_lib "iconv", <<C;
#include <iconv.h>

int main() {
    iconv_open("UTF-8", "ISO-8859-1");
}
C

check_lib "pcre", <<C;
#include <pcre.h>

int main() {
    pcre_version();
}
C

open my $mf, ">$path/local.mk";

my %platforms = (
    darwin  => sub { print $mf "OBJS+= platform/posix.o platform/darwin.o\n"; },
    linux   => sub { print $mf "OBJS+= platform/posix.o platform/linux.o\n"; $CFLAGS .= " -I/usr/include/mysql"; $LDFLAGS .= " -lpthread -lm" },
);
if($platforms{$^O}) {
    $platforms{$^O}->();
} else {
    error "Unknown system $^O. Please file an issue at https://github.com/haileysome/slash/issues.";
}

my ($ext_decls, $ext_inits, $ext_static_inits);

my $CURRENT_EXT;
sub needs_static_init {
    $ext_decls .= "void sl_static_init_ext_$CURRENT_EXT();";
    $ext_static_inits .= "sl_static_init_ext_$CURRENT_EXT();";
};

print "\n";
for my $ext (@exts) {
    print "\e[34;1mConfiguring ext/$ext\e[0m\n";
    my $conf = "$path/ext/$ext/configure.pl";
    $CURRENT_EXT = $ext;
    require $conf if -e $conf;
    $ext_decls .= "void sl_init_ext_$ext(sl_vm_t* vm);";
    $ext_inits .= "sl_init_ext_$ext(vm);";
    print $mf "include $path/ext/$ext/$ext.mk\n";
}

open my $init_exts, ">$path/src/init_exts.c";
print $init_exts <<"C";
#include <slash.h>

$ext_decls

void
sl_static_init_exts()
{
    $ext_static_inits
}

void
sl_init_exts(sl_vm_t* vm)
{
    $ext_inits
}
C
close $init_exts;

print "\n";
for my $sapi (@sapis) {
    print "\e[34;1mConfiguring sapi/$sapi\e[0m\n";
    my $conf = "$path/sapi/$sapi/configure.pl";
    require $conf if -e $conf;
    print $mf "TARGETS+= sapi[$sapi]\n";
}

print $mf "CFLAGS+= $CFLAGS\n";
print $mf "LDFLAGS+= $LDFLAGS\n";

print $mf "INSTALL_PREFIX=$prefix\n";
print $mf "SAPIS_ENABLED=" . join(" ", @sapis) . "\n";
print $mf "BASE_PATH=$path\n";

close $mf;
success "Ready to build";