#!/usr/bin/env perl

#
# This configure script just checks that all the right dependencies are
# available. It does not (yet) generate any Makefiles or header files...
#

use strict;
use File::Temp qw(tempfile tempdir);
use File::Spec::Functions qw(rel2abs);
use File::Basename;
use Getopt::Long;

my @exts = qw(mysql json base64 gcrypt inflect);
my @sapis = qw(cli);

my $path = dirname(rel2abs($0));

my $CFLAGS = "";
my $LDFLAGS = "";

exit 1 unless GetOptions "with-gc-dir=s" => \my $gc_dir,
                         "with-gmp-dir=s" => \my $gmp_dir,
                         "debug"     => \my $debug,
                         "profile"   => \my $profile,
                         "verbose"   => \my $verbose,
                         "cflags=s"  => \$CFLAGS,
                         "ldflags=s" => \$LDFLAGS,
                         "vanilla"   => sub { @exts = (); @sapis = (); },
                         "ext=s"     => sub { my $ext = $_[1];  push @exts, $ext },
                         "no-ext=s"  => sub { my $ext = $_[1];  @exts = grep { $_ ne $ext } @exts },
                         "sapi=s"    => sub { my $sapi = $_[1]; push @sapis, $sapi },
                         "no-sapi=s" => sub { my $sapi = $_[1]; @sapis = grep { $_ ne $sapi } @sapis };

if($gc_dir) {
    $CFLAGS .= " -I$gc_dir/include -L$gc_dir/lib";
}
if($gmp_dir) {
    $CFLAGS .= " -I$gmp_dir/include -L$gmp_dir/lib";
}
if($profile) {
    $CFLAGS .= " -pg";
}
if($debug) {
    $CFLAGS .= " -g";
} else {
    $CFLAGS .= " -O3";
}

sub compile {
    my ($flags, $src) = @_;
    my ($fh, $filename) = tempfile SUFFIX => ".c";
    my $binary = $filename;
    $binary =~ s/\.c$//;
    print $fh $src;
    close $fh;
    my $output = `$ENV{CC} $CFLAGS -o $binary $filename $flags 2>&1`;
    print $output if $verbose;
    chomp $output;
    $? == 0 && !$output;
};

sub check_lib {
    my ($lib, $src) = @_;
    print "Checking for lib$lib... ";
    if(compile "-l$lib", $src) {
        $LDFLAGS .= " -l$lib";
        print "ok\n";
    } else {
        # some libraries (eg. iconv) are rolled into libc on some systems. see if we can compile without the -liconv switch
        if(compile "", $src) {
            print "ok\n";
        } else {
            # nope
            print "failed\n";
            print "\n\e[31mCould not find lib$lib (used -l$lib)\nPlease make sure it is available before building Slash\n\e[0m";
            exit 1;
        }
    }
};

sub check_prog {
    my ($cmd, $expect) = @_;
    my ($prog) = split / /, $cmd;
    print "Checking for $prog... ";
    ($_) = `$cmd 2>&1`;
    chomp;
    if(/$expect/) {
        print "$_\n";
    } else {
        print "failed\n";
        print "\n\e[31mCould not find $prog (used $cmd)\nPlease make sure it is available before building Slash\n\e[0m";
        exit 1;
    }
}

if(!defined $ENV{CC}) {
    print "\e[33mCC environment variable not set, falling back to 'cc'...\n\e[0m";
    $ENV{CC} = "cc";
}
check_prog "$ENV{CC} --version";

check_prog "flex --version", /flex 2/;

check_lib "gmp", <<C;
#include <gmp.h>

int main() {
    mpz_t mpz;
    mpz_init(mpz);
}
C

check_lib "iconv", <<C;
#include <iconv.h>

int main() {
    iconv_open("UTF-8", "ISO-8859-1");
}
C

check_lib "pcre", <<C;
#include <pcre.h>

int main() {
    pcre_version();
}
C

open my $mf, ">$path/local.mk";

my %platforms = (
    darwin  => sub { print $mf "OBJS+= platform/posix.o platform/darwin.o\n"; },
    linux   => sub { print $mf "OBJS+= platform/posix.o platform/linux.o\n"; $CFLAGS .= " -I/usr/include/mysql" },
);
if($platforms{$^O}) {
    $platforms{$^O}->();
} else {    
    print "\n\e[31mUnknown system $^O. Please file an issue at https://github.com/haileysome/slash/issues.\n\e[0m";
    exit 1;
}

print $mf "CFLAGS+= $CFLAGS\n";
print $mf "LDFLAGS+= $LDFLAGS\n";

my ($ext_decls, $ext_inits, $ext_static_inits);

my $CURRENT_EXT;
sub needs_static_init {
    $ext_decls .= "void sl_static_init_ext_$CURRENT_EXT();";
    $ext_static_inits .= "sl_static_init_ext_$CURRENT_EXT();";
};

print "\n";
for my $ext (@exts) {
    print "\e[1mConfiguring ext/$ext\e[0m\n";
    my $conf = "$path/ext/$ext/configure.pl";
    $CURRENT_EXT = $ext;
    require $conf if -e $conf;
    $ext_decls .= "void sl_init_ext_$ext(sl_vm_t* vm);";
    $ext_inits .= "sl_init_ext_$ext(vm);";
    print $mf "include $path/ext/$ext/$ext.mk\n";
}

open my $init_exts, ">$path/src/init_exts.c";
print $init_exts <<"C";
#include "slash.h"

$ext_decls

void
sl_static_init_exts()
{
    $ext_static_inits
}

void
sl_init_exts(sl_vm_t* vm)
{
    $ext_inits
}
C
close $init_exts;

print "\n";
for my $sapi (@sapis) {
    print "\e[1mConfiguring sapi/$sapi\e[0m\n";
    my $conf = "$path/sapi/$sapi/configure.pl";
    require $conf if -e $conf;
    print $mf "TARGETS+= sapi[$sapi]\n";
}

close $mf;
print "\n\e[32mReady to build\n\e[0m";